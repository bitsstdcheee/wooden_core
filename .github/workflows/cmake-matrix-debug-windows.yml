name: CMake Matrix (Windows)

on:
  # push:
  #   branches: [ "master" , "dev" ]
  # pull_request:
  #   branches: [ "master" , "dev" ]
  workflow_call:
    outputs:
      success_win:
        description: "表明是否通过了 Windows 编译"
        value: ${{ jobs.build.outputs.swin }}


jobs:
  build:
    defaults:
      run:
        shell: pwsh
    outputs:
      swin: ${{ steps.result-windows.outputs.success_win }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        profile: [ MinGW Makefiles , Visual Studio 17 2022 ]
        build_type: [ Debug ]

    name: "Build"
    runs-on: ${{ matrix.os }}
    steps:
    - name: 探测版本
      run: |
        echo "G++ version"
        echo "::group::g++ version"
        g++ --version
        echo "::endgroup::"

        echo "GCC version"
        echo "::group::gcc version"
        gcc --version
        echo "::endgroup::"

        echo "Make version"
        echo "::group::Make version"
        make --version
        echo "::endgroup::"

        echo "CMake version"
        echo "::group::CMake Version"
        cmake --version
        echo "::endgroup::"

        echo "python version"
        echo "::group::python version"
        python --version
        echo "::endgroup::"
    - name: 输出 CMake 支持 Generators
      run: |
        cmake --help
    - name: 下载分支
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: 配置 CMake (${{ matrix.os }})
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DGBK=off -G "${{ matrix.profile }}"
    - name: 编译
      id: compile
      run: cmake --build ${{github.workspace}}/build --config "${{ matrix.build_type }}" --target=wooden_game
    - name: 执行
      shell: cmd
      run: |
        echo "The Current Exec Path:"
        for /r build %%i in (wooden_game.exe*) do @echo %%i
        for /r build %%j in (wooden_game.exe*) do @%%j > build/output.txt
    - name: 输出结果
      shell: cmd
      run: |
        type ".\build\output.txt"
    - name: 变量统计
      id: result-windows
      if: always()
      run: |
        if ("${{ steps.compile.outcome }}" -eq "success") {
          $success_win=1
        } else {
          $success_win=0
        }
        echo $success_win
        echo "success_win=$success_win" >> "$env:GITHUB_OUTPUT"
    - name: 上传 Artifact
      if: always()
      uses: actions/upload-artifact@v3.1.2
      with:
        name: wooden_core-${{ matrix.build_type }}-${{ matrix.os }}-${{ matrix.profile }}
        path: |
          build/
          !build/_deps
