name: CMake Matrix (Linux)

on:
  # push:
  #   branches: [ "master" , "dev" ]
  # pull_request:
  #   branches: [ "master" , "dev" ]
  workflow_call:
    outputs:
      success_unix:
        description: "表明是否通过了 Unix 编译"
        value: ${{ jobs.build.outputs.sunix }}

jobs:
  build:
    outputs:
      sunix: ${{ steps.result-unix.outputs.success_unix }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        profile: [ Unix Makefiles ]
        build_type: [ Debug ]

    name: "Build"
    runs-on: ${{ matrix.os }}
    steps:
    - name: 探测版本
      run: |
        echo "G++ version"
        echo "::group::g++ version"
        g++ --version
        echo "::endgroup::"

        echo "GCC version"
        echo "::group::gcc version"
        gcc --version
        echo "::endgroup::"

        echo "Make version"
        echo "::group::Make version"
        make --version
        echo "::endgroup::"

        echo "CMake version"
        echo "::group::CMake Version"
        cmake --version
        echo "::endgroup::"

        echo "python version"
        echo "::group::python version"
        python --version
        echo "::endgroup::"
    - name: 输出 CMake 支持 Generators
      run: |
        cmake --help
    - name: 下载分支
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: 配置 CMake (${{ matrix.os }})
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DGBK=off -G "${{ matrix.profile }}"
    - name: 安装 LCOV
      shell: bash
      run: |
        sudo apt-get --assume-yes install lcov
    - name: 编译
      id: compile
      run: cmake --build ${{github.workspace}}/build --config "${{ matrix.build_type }}" --target=wooden_game
    - name: 执行
      run: |
        echo "The Current Exec Path:"
        find . -name "wooden_game" -exec ls '{}' ';'
        find . -name "wooden_game" -exec ./'{}' ';' > build/output.txt
    - name: 输出结果
      shell: bash
      run: |
        cat build/output.txt
    - name: 变量统计
      id: result-unix
      if: always()
      run: |
        if [ "${{ steps.compile.outcome }}" == "success" ]; then
          success_unix=1
        else
          success_unix=0
        fi
        echo $success_unix
        echo "success_unix=$success_unix" >> "$GITHUB_OUTPUT"
    - name: LCOV 数据收集
      shell: bash
      run: |
        cd build
        lcov -c -d ./ -o cover.info --rc lcov_branch_coverage=1
        genhtml -o result-html cover.info
    - name: LCOV 生成数据压缩
      shell: bash
      run: |
        cd build
        tar -zcvf result-html.tar.gz result-html/
        echo "删除原来的文件夹"
        rm -rf result-html/
    - name: 上传 Artifact
      if: always()
      uses: actions/upload-artifact@v3.1.2
      with:
        name: wooden_core-${{ matrix.build_type }}-${{ matrix.os }}-${{ matrix.profile }}
        path:
          build/