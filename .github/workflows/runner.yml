name: Runner
on: [ push, pull_request ]

jobs:
    static-checks:
        name: 📊 静态检查
        uses: ./.github/workflows/static-check.yml

    clang-format:
        name: 代码格式化
        permissions:
            actions: read
            checks: read
            contents: write
        needs: static-checks
        if: ${{ success() && needs.static-checks.outputs.exit_code != 0 }}
        with:
            event_name: ${{ github.event_name }}
        uses: ./.github/workflows/clang-format.yml

    check-commit-release:
        name: 检查是否为发布状态
        if: always()
        runs-on: ubuntu-latest
        outputs:
            release: ${{ steps.check_commit_msg.outputs.release }}
        steps:
            - name: 检查 Commit 信息
              id: check_commit_msg
              run: |
                echo "release=${{ contains(github.event.head_commit.message, '[Release]') || contains(github.event.head_commit.message, '[All]') || github.event_name == 'pull_request' }}" >> "$GITHUB_OUTPUT"
            - name: 输出结果
              run: |
                echo "true 时打开 release, false 时仅运行 debug"
                echo ${{ steps.check_commit_msg.outputs.release }}

    cmake_matrix_debug_windows:
        name: CMake 矩阵编译 (Debug, Windows)
        needs: [clang-format, static-checks]
        if: ${{ (success() || needs.clang-format.result == 'skipped' || needs.clang-format.result == 'success') && needs.static-checks.result == 'success' }}
        uses: ./.github/workflows/cmake-matrix-debug-windows.yml

    cmake_matrix_debug_linux:
        name: CMake 矩阵编译 (Debug, Linux)
        needs: [clang-format, static-checks]
        if: ${{ (success() || needs.clang-format.result == 'skipped' || needs.clang-format.result == 'success') && needs.static-checks.result == 'success' }}
        uses: ./.github/workflows/cmake-matrix-debug-linux.yml
        
    cmake_matrix_debug_macos:
        name: CMake 矩阵编译 (Debug, macOS)
        needs: [clang-format, static-checks]
        if: ${{ (success() || needs.clang-format.result == 'skipped' || needs.clang-format.result == 'success') && needs.static-checks.result == 'success' }}
        uses: ./.github/workflows/cmake-matrix-debug-macos.yml

    cmake_matrix_release:
        name: CMake 矩阵编译 (Release)
        needs: [clang-format, static-checks, check-commit-release]
        if: ${{ (success() || needs.clang-format.result == 'skipped' || needs.clang-format.result == 'success') && needs.static-checks.result == 'success' && (needs.check-commit-release.outputs.release == 'true' || needs.check-commit-release.outputs.release == true || needs.check-commit-release.outputs.release == 1) }}
        uses: ./.github/workflows/cmake-matrix-release.yml

    test_output_windows:
        name: 测试输出 (Windows)
        needs: [cmake_matrix_debug_windows]
        if: ${{ always() }}
        runs-on: ubuntu-latest
        steps:
            - name: 输出变量
              run: |
                echo "Windows: ${{ needs.cmake_matrix_debug_windows.outputs.success_win }}"

    test_output_unix:
        name: 测试输出 (Unix)
        needs: [cmake_matrix_debug_linux, cmake_matrix_debug_macos]
        if: ${{ always() }}
        runs-on: ubuntu-latest
        steps:
            - name: 输出变量
              run: |
                echo "Linux: ${{ needs.cmake_matrix_debug_linux.outputs.success_unix }}"
                echo "macOS: ${{ needs.cmake_matrix_debug_macos.outputs.success_unix }}"
                echo "Unix: ${{ needs.cmake_matrix_debug_linux.outputs.success_unix && needs.cmake_matrix_debug_macos.outputs.success_unix }}"

    gtest_unix:
        name: gtest 测试 (Unix)
        needs: [cmake_matrix_debug_linux, cmake_matrix_debug_macos]
        if: ${{ success() || (needs.cmake_matrix_debug_linux.outputs.success_unix == 1 && needs.cmake_matrix_debug_macos.outputs.success_unix == 1) }}
        uses: ./.github/workflows/cmake-matrix-test-unix.yml

    fetch_latest_ref:
        name: 仓库克隆
        if: always()
        uses: ./.github/workflows/fetch-last-ref.yml