// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/RoundPatch.proto

#include "proto/RoundPatch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace proto {
template <typename>
PROTOBUF_CONSTEXPR PRoundPatch_map_int_bool::PRoundPatch_map_int_bool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ 0

  , /*decltype(_impl_.value_)*/ false
} {}
struct PRoundPatch_map_int_boolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoundPatch_map_int_boolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoundPatch_map_int_boolDefaultTypeInternal() {}
  union {
    PRoundPatch_map_int_bool _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoundPatch_map_int_boolDefaultTypeInternal _PRoundPatch_map_int_bool_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PRoundPatch::PRoundPatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/ {}

  , /*decltype(_impl_.next_patch_)*/{}
  , /*decltype(_impl_.qi_)*/{}
  , /*decltype(_impl_.choices_)*/{}
  , /*decltype(_impl_.tag_died_)*/{}
  , /*decltype(_impl_.skl_count_)*/{}
  , /*decltype(_impl_.skill_used_)*/{}
  , /*decltype(_impl_.delayed_players_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.prev_patch_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.judged_)*/ false

  , /*decltype(_impl_.head_)*/ false
} {}
struct PRoundPatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoundPatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoundPatchDefaultTypeInternal() {}
  union {
    PRoundPatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoundPatchDefaultTypeInternal _PRoundPatch_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fRoundPatch_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fRoundPatch_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fRoundPatch_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fRoundPatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch_map_int_bool, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch_map_int_bool, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch_map_int_bool, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch_map_int_bool, _impl_.value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.prev_patch_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.players_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.next_patch_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.qi_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.choices_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.tag_died_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.skl_count_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.skill_used_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.delayed_players_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.judged_),
    PROTOBUF_FIELD_OFFSET(::proto::PRoundPatch, _impl_.head_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::proto::PRoundPatch_map_int_bool)},
        { 12, 32, -1, sizeof(::proto::PRoundPatch)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::proto::_PRoundPatch_map_int_bool_default_instance_._instance,
    &::proto::_PRoundPatch_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fRoundPatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\026proto/RoundPatch.proto\022\005proto\032\021proto/S"
    "kill.proto\032\016proto/Qi.proto\032\023proto/TagDie"
    "d.proto\032\026proto/SkillCount.proto\032\025proto/S"
    "killUsed.proto\"\205\003\n\013PRoundPatch\022\n\n\002id\030\001 \002"
    "(\t\022\022\n\nprev_patch\030\002 \001(\t\022\017\n\007players\030\003 \003(\005\022"
    "\022\n\nnext_patch\030\004 \003(\t\022\026\n\002qi\030\005 \003(\0132\n.proto."
    "PQi\022$\n\007choices\030\006 \003(\0132\023.proto.PSkillChoic"
    "e\022!\n\010tag_died\030\007 \003(\0132\017.proto.PTagDied\022%\n\t"
    "skl_count\030\010 \003(\0132\022.proto.PSkillCount\022%\n\ns"
    "kill_used\030\t \003(\0132\021.proto.PSkillUsed\0228\n\017de"
    "layed_players\030\n \003(\0132\037.proto.PRoundPatch."
    "map_int_bool\022\016\n\006judged\030\013 \002(\010\022\014\n\004head\030\014 \002"
    "(\010\032*\n\014map_int_bool\022\013\n\003key\030\001 \002(\005\022\r\n\005value"
    "\030\002 \002(\010P\000P\001P\002P\003P\004"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fRoundPatch_2eproto_deps[5] =
    {
        &::descriptor_table_proto_2fQi_2eproto,
        &::descriptor_table_proto_2fSkill_2eproto,
        &::descriptor_table_proto_2fSkillCount_2eproto,
        &::descriptor_table_proto_2fSkillUsed_2eproto,
        &::descriptor_table_proto_2fTagDied_2eproto,
};
static ::absl::once_flag descriptor_table_proto_2fRoundPatch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fRoundPatch_2eproto = {
    false,
    false,
    536,
    descriptor_table_protodef_proto_2fRoundPatch_2eproto,
    "proto/RoundPatch.proto",
    &descriptor_table_proto_2fRoundPatch_2eproto_once,
    descriptor_table_proto_2fRoundPatch_2eproto_deps,
    5,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2fRoundPatch_2eproto::offsets,
    file_level_metadata_proto_2fRoundPatch_2eproto,
    file_level_enum_descriptors_proto_2fRoundPatch_2eproto,
    file_level_service_descriptors_proto_2fRoundPatch_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fRoundPatch_2eproto_getter() {
  return &descriptor_table_proto_2fRoundPatch_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fRoundPatch_2eproto(&descriptor_table_proto_2fRoundPatch_2eproto);
namespace proto {
// ===================================================================

class PRoundPatch_map_int_bool::_Internal {
 public:
  using HasBits = decltype(std::declval<PRoundPatch_map_int_bool>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PRoundPatch_map_int_bool, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PRoundPatch_map_int_bool::PRoundPatch_map_int_bool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PRoundPatch.map_int_bool)
}
PRoundPatch_map_int_bool::PRoundPatch_map_int_bool(const PRoundPatch_map_int_bool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PRoundPatch.map_int_bool)
}

inline void PRoundPatch_map_int_bool::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) { 0 }

    , decltype(_impl_.value_) { false }

  };
}

PRoundPatch_map_int_bool::~PRoundPatch_map_int_bool() {
  // @@protoc_insertion_point(destructor:proto.PRoundPatch.map_int_bool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoundPatch_map_int_bool::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PRoundPatch_map_int_bool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PRoundPatch_map_int_bool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PRoundPatch.map_int_bool)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.key_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoundPatch_map_int_bool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PRoundPatch_map_int_bool::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PRoundPatch.map_int_bool)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_key(), target);
  }

  // required bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PRoundPatch.map_int_bool)
  return target;
}

::size_t PRoundPatch_map_int_bool::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PRoundPatch.map_int_bool)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_key());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bool value = 2;
    total_size += 2;
  }

  return total_size;
}
::size_t PRoundPatch_map_int_bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PRoundPatch.map_int_bool)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_key());

    // required bool value = 2;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoundPatch_map_int_bool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PRoundPatch_map_int_bool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoundPatch_map_int_bool::GetClassData() const { return &_class_data_; }


void PRoundPatch_map_int_bool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PRoundPatch_map_int_bool*>(&to_msg);
  auto& from = static_cast<const PRoundPatch_map_int_bool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PRoundPatch.map_int_bool)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoundPatch_map_int_bool::CopyFrom(const PRoundPatch_map_int_bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PRoundPatch.map_int_bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoundPatch_map_int_bool::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PRoundPatch_map_int_bool::InternalSwap(PRoundPatch_map_int_bool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoundPatch_map_int_bool, _impl_.value_)
      + sizeof(PRoundPatch_map_int_bool::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(PRoundPatch_map_int_bool, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoundPatch_map_int_bool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fRoundPatch_2eproto_getter, &descriptor_table_proto_2fRoundPatch_2eproto_once,
      file_level_metadata_proto_2fRoundPatch_2eproto[0]);
}
// ===================================================================

class PRoundPatch::_Internal {
 public:
  using HasBits = decltype(std::declval<PRoundPatch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PRoundPatch, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_judged(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

void PRoundPatch::clear_qi() {
  _internal_mutable_qi()->Clear();
}
void PRoundPatch::clear_choices() {
  _internal_mutable_choices()->Clear();
}
void PRoundPatch::clear_tag_died() {
  _internal_mutable_tag_died()->Clear();
}
void PRoundPatch::clear_skl_count() {
  _internal_mutable_skl_count()->Clear();
}
void PRoundPatch::clear_skill_used() {
  _internal_mutable_skill_used()->Clear();
}
PRoundPatch::PRoundPatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PRoundPatch)
}
PRoundPatch::PRoundPatch(const PRoundPatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PRoundPatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_) { from._impl_.players_ }

    , decltype(_impl_.next_patch_){from._impl_.next_patch_}
    , decltype(_impl_.qi_){from._impl_.qi_}
    , decltype(_impl_.choices_){from._impl_.choices_}
    , decltype(_impl_.tag_died_){from._impl_.tag_died_}
    , decltype(_impl_.skl_count_){from._impl_.skl_count_}
    , decltype(_impl_.skill_used_){from._impl_.skill_used_}
    , decltype(_impl_.delayed_players_){from._impl_.delayed_players_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.prev_patch_) {}

    , decltype(_impl_.judged_) {}

    , decltype(_impl_.head_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.prev_patch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prev_patch_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.prev_patch_.Set(from._internal_prev_patch(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.judged_, &from._impl_.judged_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.head_) -
    reinterpret_cast<char*>(&_impl_.judged_)) + sizeof(_impl_.head_));
  // @@protoc_insertion_point(copy_constructor:proto.PRoundPatch)
}

inline void PRoundPatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_) { arena }

    , decltype(_impl_.next_patch_){arena}
    , decltype(_impl_.qi_){arena}
    , decltype(_impl_.choices_){arena}
    , decltype(_impl_.tag_died_){arena}
    , decltype(_impl_.skl_count_){arena}
    , decltype(_impl_.skill_used_){arena}
    , decltype(_impl_.delayed_players_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.prev_patch_) {}

    , decltype(_impl_.judged_) { false }

    , decltype(_impl_.head_) { false }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prev_patch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prev_patch_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PRoundPatch::~PRoundPatch() {
  // @@protoc_insertion_point(destructor:proto.PRoundPatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoundPatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedField();
  _internal_mutable_next_patch()->~RepeatedPtrField();
  _internal_mutable_qi()->~RepeatedPtrField();
  _internal_mutable_choices()->~RepeatedPtrField();
  _internal_mutable_tag_died()->~RepeatedPtrField();
  _internal_mutable_skl_count()->~RepeatedPtrField();
  _internal_mutable_skill_used()->~RepeatedPtrField();
  _internal_mutable_delayed_players()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.prev_patch_.Destroy();
}

void PRoundPatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PRoundPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PRoundPatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_players()->Clear();
  _internal_mutable_next_patch()->Clear();
  _internal_mutable_qi()->Clear();
  _internal_mutable_choices()->Clear();
  _internal_mutable_tag_died()->Clear();
  _internal_mutable_skl_count()->Clear();
  _internal_mutable_skill_used()->Clear();
  _internal_mutable_delayed_players()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.prev_patch_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.judged_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.head_) -
      reinterpret_cast<char*>(&_impl_.judged_)) + sizeof(_impl_.head_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoundPatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PRoundPatch.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string prev_patch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prev_patch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "proto.PRoundPatch.prev_patch");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_players(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string next_patch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_next_patch();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "proto.PRoundPatch.next_patch");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PQi qi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PSkillChoice choices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PTagDied tag_died = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tag_died(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PSkillCount skl_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skl_count(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PSkillUsed skill_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill_used(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PRoundPatch.map_int_bool delayed_players = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delayed_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool judged = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_judged(&has_bits);
          _impl_.judged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool head = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_head(&has_bits);
          _impl_.head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PRoundPatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PRoundPatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "proto.PRoundPatch.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string prev_patch = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_prev_patch();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "proto.PRoundPatch.prev_patch");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated int32 players = 3;
  for (int i = 0, n = this->_internal_players_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_players(i), target);
  }

  // repeated string next_patch = 4;
  for (int i = 0, n = this->_internal_next_patch_size(); i < n; ++i) {
    const auto& s = this->_internal_next_patch(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "proto.PRoundPatch.next_patch");
    target = stream->WriteString(4, s, target);
  }

  // repeated .proto.PQi qi = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qi_size()); i < n; i++) {
    const auto& repfield = this->_internal_qi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PSkillChoice choices = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_choices_size()); i < n; i++) {
    const auto& repfield = this->_internal_choices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PTagDied tag_died = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tag_died_size()); i < n; i++) {
    const auto& repfield = this->_internal_tag_died(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PSkillCount skl_count = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skl_count_size()); i < n; i++) {
    const auto& repfield = this->_internal_skl_count(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PSkillUsed skill_used = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skill_used_size()); i < n; i++) {
    const auto& repfield = this->_internal_skill_used(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.PRoundPatch.map_int_bool delayed_players = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delayed_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_delayed_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool judged = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_judged(), target);
  }

  // required bool head = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_head(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PRoundPatch)
  return target;
}

::size_t PRoundPatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PRoundPatch)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string id = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required bool judged = 11;
    total_size += 2;
  }

  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    // required bool head = 12;
    total_size += 2;
  }

  return total_size;
}
::size_t PRoundPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PRoundPatch)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());

    // required bool judged = 11;
    total_size += 2;

    // required bool head = 12;
    total_size += 2;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 players = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_players())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_players_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated string next_patch = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_next_patch().size());
  for (int i = 0, n = _internal_next_patch().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_next_patch().Get(i));
  }

  // repeated .proto.PQi qi = 5;
  total_size += 1UL * this->_internal_qi_size();
  for (const auto& msg : this->_internal_qi()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PSkillChoice choices = 6;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->_internal_choices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PTagDied tag_died = 7;
  total_size += 1UL * this->_internal_tag_died_size();
  for (const auto& msg : this->_internal_tag_died()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PSkillCount skl_count = 8;
  total_size += 1UL * this->_internal_skl_count_size();
  for (const auto& msg : this->_internal_skl_count()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PSkillUsed skill_used = 9;
  total_size += 1UL * this->_internal_skill_used_size();
  for (const auto& msg : this->_internal_skill_used()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PRoundPatch.map_int_bool delayed_players = 10;
  total_size += 1UL * this->_internal_delayed_players_size();
  for (const auto& msg : this->_internal_delayed_players()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string prev_patch = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_prev_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoundPatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PRoundPatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoundPatch::GetClassData() const { return &_class_data_; }


void PRoundPatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PRoundPatch*>(&to_msg);
  auto& from = static_cast<const PRoundPatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PRoundPatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_mutable_next_patch()->MergeFrom(from._internal_next_patch());
  _this->_internal_mutable_qi()->MergeFrom(from._internal_qi());
  _this->_internal_mutable_choices()->MergeFrom(from._internal_choices());
  _this->_internal_mutable_tag_died()->MergeFrom(from._internal_tag_died());
  _this->_internal_mutable_skl_count()->MergeFrom(from._internal_skl_count());
  _this->_internal_mutable_skill_used()->MergeFrom(from._internal_skill_used());
  _this->_internal_mutable_delayed_players()->MergeFrom(from._internal_delayed_players());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_prev_patch(from._internal_prev_patch());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.judged_ = from._impl_.judged_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.head_ = from._impl_.head_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoundPatch::CopyFrom(const PRoundPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PRoundPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoundPatch::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_choices()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_tag_died()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_skl_count()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_skill_used()))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_delayed_players()))
    return false;
  return true;
}

void PRoundPatch::InternalSwap(PRoundPatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _internal_mutable_next_patch()->InternalSwap(
      other->_internal_mutable_next_patch());
  _internal_mutable_qi()->InternalSwap(other->_internal_mutable_qi());
  _internal_mutable_choices()->InternalSwap(other->_internal_mutable_choices());
  _internal_mutable_tag_died()->InternalSwap(other->_internal_mutable_tag_died());
  _internal_mutable_skl_count()->InternalSwap(other->_internal_mutable_skl_count());
  _internal_mutable_skill_used()->InternalSwap(other->_internal_mutable_skill_used());
  _internal_mutable_delayed_players()->InternalSwap(other->_internal_mutable_delayed_players());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prev_patch_, lhs_arena,
                                       &other->_impl_.prev_patch_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoundPatch, _impl_.head_)
      + sizeof(PRoundPatch::_impl_.head_)
      - PROTOBUF_FIELD_OFFSET(PRoundPatch, _impl_.judged_)>(
          reinterpret_cast<char*>(&_impl_.judged_),
          reinterpret_cast<char*>(&other->_impl_.judged_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoundPatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fRoundPatch_2eproto_getter, &descriptor_table_proto_2fRoundPatch_2eproto_once,
      file_level_metadata_proto_2fRoundPatch_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::PRoundPatch_map_int_bool*
Arena::CreateMaybeMessage< ::proto::PRoundPatch_map_int_bool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PRoundPatch_map_int_bool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PRoundPatch*
Arena::CreateMaybeMessage< ::proto::PRoundPatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PRoundPatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
