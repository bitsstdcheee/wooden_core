// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Skill.proto

#include "proto/Skill.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace proto {
template <typename>
PROTOBUF_CONSTEXPR PSkill::PSkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skl_)*/ 0

  , /*decltype(_impl_.target_)*/ 0
} {}
struct PSkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSkillDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSkillDefaultTypeInternal() {}
  union {
    PSkill _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSkillDefaultTypeInternal _PSkill_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PSkillList::PSkillList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PSkillListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSkillListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSkillListDefaultTypeInternal() {}
  union {
    PSkillList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSkillListDefaultTypeInternal _PSkillList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PSkillChoice::PSkillChoice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skl_)*/nullptr
  , /*decltype(_impl_.id_)*/ 0
} {}
struct PSkillChoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSkillChoiceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSkillChoiceDefaultTypeInternal() {}
  union {
    PSkillChoice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSkillChoiceDefaultTypeInternal _PSkillChoice_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fSkill_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fSkill_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fSkill_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fSkill_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::proto::PSkill, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkill, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PSkill, _impl_.skl_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkill, _impl_.target_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::proto::PSkillList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PSkillList, _impl_.list_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillChoice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillChoice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PSkillChoice, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillChoice, _impl_.skl_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::proto::PSkill)},
        { 12, -1, -1, sizeof(::proto::PSkillList)},
        { 21, 31, -1, sizeof(::proto::PSkillChoice)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::proto::_PSkill_default_instance_._instance,
    &::proto::_PSkillList_default_instance_._instance,
    &::proto::_PSkillChoice_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fSkill_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021proto/Skill.proto\022\005proto\"4\n\006PSkill\022\032\n\003"
    "skl\030\001 \002(\0162\r.proto.Pskill\022\016\n\006target\030\002 \002(\005"
    "\")\n\nPSkillList\022\033\n\004list\030\001 \003(\0132\r.proto.PSk"
    "ill\":\n\014PSkillChoice\022\n\n\002id\030\001 \002(\005\022\036\n\003skl\030\002"
    " \002(\0132\021.proto.PSkillList*\344\003\n\006Pskill\022\010\n\004no"
    "ne\020\000\022\010\n\004clap\020\001\022\016\n\nwooden_axe\020\002\022\016\n\nnormal"
    "_axe\020\003\022\017\n\013diamond_axe\020\004\022\021\n\renchanted_axe"
    "\020\005\022\020\n\014wooden_sword\020\006\022\020\n\014yellow_sword\020\007\022\017"
    "\n\013stone_sword\020\010\022\016\n\niron_sword\020\t\022\016\n\ngold_"
    "sword\020\n\022\021\n\rdiamond_sword\020\013\022\023\n\017enchanted_"
    "sword\020\014\022\013\n\007defense\020\r\022\017\n\013mid_defense\020\016\022\021\n"
    "\rlarge_defense\020\017\022\n\n\006ashiba\020\020\022\006\n\002zd\020\021\022\n\n\006"
    "hither\020\022\022\010\n\004fist\020\023\022\010\n\004palm\020\024\022\014\n\010bo_sword"
    "\020\025\022\n\n\006alpaca\020\026\022\010\n\004tube\020\027\022\010\n\004gulu\020\030\022\t\n\005ju"
    "dge\020\031\022\016\n\nfetch_fist\020\032\022\017\n\013fetch_sword\020\033\022\014"
    "\n\010fetch_bo\020\034\022\t\n\005hands\020\035\022\032\n\026yellow_sword_"
    "destoryed\020\036\022\021\n\rtube_selected\020\037"
};
static ::absl::once_flag descriptor_table_proto_2fSkill_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fSkill_2eproto = {
    false,
    false,
    670,
    descriptor_table_protodef_proto_2fSkill_2eproto,
    "proto/Skill.proto",
    &descriptor_table_proto_2fSkill_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_proto_2fSkill_2eproto::offsets,
    file_level_metadata_proto_2fSkill_2eproto,
    file_level_enum_descriptors_proto_2fSkill_2eproto,
    file_level_service_descriptors_proto_2fSkill_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fSkill_2eproto_getter() {
  return &descriptor_table_proto_2fSkill_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fSkill_2eproto(&descriptor_table_proto_2fSkill_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pskill_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fSkill_2eproto);
  return file_level_enum_descriptors_proto_2fSkill_2eproto[0];
}
bool Pskill_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class PSkill::_Internal {
 public:
  using HasBits = decltype(std::declval<PSkill>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PSkill, _impl_._has_bits_);
  static void set_has_skl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PSkill::PSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PSkill)
}
PSkill::PSkill(const PSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PSkill)
}

inline void PSkill::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skl_) { 0 }

    , decltype(_impl_.target_) { 0 }

  };
}

PSkill::~PSkill() {
  // @@protoc_insertion_point(destructor:proto.PSkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSkill::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PSkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PSkill)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.skl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_) -
        reinterpret_cast<char*>(&_impl_.skl_)) + sizeof(_impl_.target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .proto.Pskill skl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::Pskill_IsValid(static_cast<int>(val)))) {
            _internal_set_skl(static_cast<::proto::Pskill>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PSkill::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PSkill)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .proto.Pskill skl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_skl(), target);
  }

  // required int32 target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PSkill)
  return target;
}

::size_t PSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PSkill)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required .proto.Pskill skl = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_skl());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 target = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_target());
  }

  return total_size;
}
::size_t PSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PSkill)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .proto.Pskill skl = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_skl());

    // required int32 target = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSkill::GetClassData() const { return &_class_data_; }


void PSkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSkill*>(&to_msg);
  auto& from = static_cast<const PSkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PSkill)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.skl_ = from._impl_.skl_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSkill::CopyFrom(const PSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSkill::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PSkill::InternalSwap(PSkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PSkill, _impl_.target_)
      + sizeof(PSkill::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(PSkill, _impl_.skl_)>(
          reinterpret_cast<char*>(&_impl_.skl_),
          reinterpret_cast<char*>(&other->_impl_.skl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PSkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSkill_2eproto_getter, &descriptor_table_proto_2fSkill_2eproto_once,
      file_level_metadata_proto_2fSkill_2eproto[0]);
}
// ===================================================================

class PSkillList::_Internal {
 public:
};

PSkillList::PSkillList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PSkillList)
}
PSkillList::PSkillList(const PSkillList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PSkillList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PSkillList)
}

inline void PSkillList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PSkillList::~PSkillList() {
  // @@protoc_insertion_point(destructor:proto.PSkillList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSkillList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_list()->~RepeatedPtrField();
}

void PSkillList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSkillList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PSkillList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_list()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSkillList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.PSkill list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PSkillList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PSkillList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.PSkill list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PSkillList)
  return target;
}

::size_t PSkillList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PSkillList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PSkill list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_internal_list()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSkillList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSkillList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSkillList::GetClassData() const { return &_class_data_; }


void PSkillList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSkillList*>(&to_msg);
  auto& from = static_cast<const PSkillList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PSkillList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_list()->MergeFrom(from._internal_list());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSkillList::CopyFrom(const PSkillList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PSkillList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSkillList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_list()))
    return false;
  return true;
}

void PSkillList::InternalSwap(PSkillList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_list()->InternalSwap(other->_internal_mutable_list());
}

::PROTOBUF_NAMESPACE_ID::Metadata PSkillList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSkill_2eproto_getter, &descriptor_table_proto_2fSkill_2eproto_once,
      file_level_metadata_proto_2fSkill_2eproto[1]);
}
// ===================================================================

class PSkillChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<PSkillChoice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PSkillChoice, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::PSkillList& skl(const PSkillChoice* msg);
  static void set_has_skl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::proto::PSkillList&
PSkillChoice::_Internal::skl(const PSkillChoice* msg) {
  return *msg->_impl_.skl_;
}
PSkillChoice::PSkillChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PSkillChoice)
}
PSkillChoice::PSkillChoice(const PSkillChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PSkillChoice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skl_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.skl_ = new ::proto::PSkillList(*from._impl_.skl_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.PSkillChoice)
}

inline void PSkillChoice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skl_){nullptr}
    , decltype(_impl_.id_) { 0 }

  };
}

PSkillChoice::~PSkillChoice() {
  // @@protoc_insertion_point(destructor:proto.PSkillChoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSkillChoice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.skl_;
}

void PSkillChoice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSkillChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PSkillChoice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.skl_ != nullptr);
    _impl_.skl_->Clear();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSkillChoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required .proto.PSkillList skl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_skl(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PSkillChoice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PSkillChoice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  // required .proto.PSkillList skl = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::skl(this),
        _Internal::skl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PSkillChoice)
  return target;
}

::size_t PSkillChoice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PSkillChoice)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required .proto.PSkillList skl = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skl_);
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return total_size;
}
::size_t PSkillChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PSkillChoice)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .proto.PSkillList skl = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skl_);

    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSkillChoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSkillChoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSkillChoice::GetClassData() const { return &_class_data_; }


void PSkillChoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSkillChoice*>(&to_msg);
  auto& from = static_cast<const PSkillChoice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PSkillChoice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_skl()->::proto::PSkillList::MergeFrom(
          from._internal_skl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSkillChoice::CopyFrom(const PSkillChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PSkillChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSkillChoice::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.skl_->IsInitialized()) return false;
  }
  return true;
}

void PSkillChoice::InternalSwap(PSkillChoice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PSkillChoice, _impl_.id_)
      + sizeof(PSkillChoice::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PSkillChoice, _impl_.skl_)>(
          reinterpret_cast<char*>(&_impl_.skl_),
          reinterpret_cast<char*>(&other->_impl_.skl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PSkillChoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSkill_2eproto_getter, &descriptor_table_proto_2fSkill_2eproto_once,
      file_level_metadata_proto_2fSkill_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::PSkill*
Arena::CreateMaybeMessage< ::proto::PSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PSkillList*
Arena::CreateMaybeMessage< ::proto::PSkillList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PSkillList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PSkillChoice*
Arena::CreateMaybeMessage< ::proto::PSkillChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PSkillChoice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
