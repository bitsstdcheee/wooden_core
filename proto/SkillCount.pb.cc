// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SkillCount.proto

#include "proto/SkillCount.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace proto {
template <typename>
PROTOBUF_CONSTEXPR PSkillCountSingle::PSkillCountSingle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skl_)*/ 0

  , /*decltype(_impl_.count_)*/ 0
} {}
struct PSkillCountSingleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSkillCountSingleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSkillCountSingleDefaultTypeInternal() {}
  union {
    PSkillCountSingle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSkillCountSingleDefaultTypeInternal _PSkillCountSingle_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PSkillCount::PSkillCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.id_)*/ 0
} {}
struct PSkillCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSkillCountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSkillCountDefaultTypeInternal() {}
  union {
    PSkillCount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSkillCountDefaultTypeInternal _PSkillCount_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fSkillCount_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fSkillCount_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fSkillCount_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fSkillCount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCountSingle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCountSingle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCountSingle, _impl_.skl_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCountSingle, _impl_.count_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCount, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::proto::PSkillCount, _impl_.list_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::proto::PSkillCountSingle)},
        { 12, 22, -1, sizeof(::proto::PSkillCount)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::proto::_PSkillCountSingle_default_instance_._instance,
    &::proto::_PSkillCount_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fSkillCount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\026proto/SkillCount.proto\022\005proto\"/\n\021PSkil"
    "lCountSingle\022\013\n\003skl\030\001 \002(\005\022\r\n\005count\030\002 \002(\005"
    "\"A\n\013PSkillCount\022\n\n\002id\030\001 \002(\005\022&\n\004list\030\002 \003("
    "\0132\030.proto.PSkillCountSingle"
};
static ::absl::once_flag descriptor_table_proto_2fSkillCount_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fSkillCount_2eproto = {
    false,
    false,
    147,
    descriptor_table_protodef_proto_2fSkillCount_2eproto,
    "proto/SkillCount.proto",
    &descriptor_table_proto_2fSkillCount_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2fSkillCount_2eproto::offsets,
    file_level_metadata_proto_2fSkillCount_2eproto,
    file_level_enum_descriptors_proto_2fSkillCount_2eproto,
    file_level_service_descriptors_proto_2fSkillCount_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fSkillCount_2eproto_getter() {
  return &descriptor_table_proto_2fSkillCount_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fSkillCount_2eproto(&descriptor_table_proto_2fSkillCount_2eproto);
namespace proto {
// ===================================================================

class PSkillCountSingle::_Internal {
 public:
  using HasBits = decltype(std::declval<PSkillCountSingle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PSkillCountSingle, _impl_._has_bits_);
  static void set_has_skl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PSkillCountSingle::PSkillCountSingle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PSkillCountSingle)
}
PSkillCountSingle::PSkillCountSingle(const PSkillCountSingle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.PSkillCountSingle)
}

inline void PSkillCountSingle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skl_) { 0 }

    , decltype(_impl_.count_) { 0 }

  };
}

PSkillCountSingle::~PSkillCountSingle() {
  // @@protoc_insertion_point(destructor:proto.PSkillCountSingle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSkillCountSingle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PSkillCountSingle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSkillCountSingle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PSkillCountSingle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.skl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.skl_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSkillCountSingle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 skl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_skl(&has_bits);
          _impl_.skl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PSkillCountSingle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PSkillCountSingle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 skl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_skl(), target);
  }

  // required int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PSkillCountSingle)
  return target;
}

::size_t PSkillCountSingle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PSkillCountSingle)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required int32 skl = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_skl());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_count());
  }

  return total_size;
}
::size_t PSkillCountSingle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PSkillCountSingle)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 skl = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_skl());

    // required int32 count = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSkillCountSingle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSkillCountSingle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSkillCountSingle::GetClassData() const { return &_class_data_; }


void PSkillCountSingle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSkillCountSingle*>(&to_msg);
  auto& from = static_cast<const PSkillCountSingle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PSkillCountSingle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.skl_ = from._impl_.skl_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSkillCountSingle::CopyFrom(const PSkillCountSingle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PSkillCountSingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSkillCountSingle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PSkillCountSingle::InternalSwap(PSkillCountSingle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PSkillCountSingle, _impl_.count_)
      + sizeof(PSkillCountSingle::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(PSkillCountSingle, _impl_.skl_)>(
          reinterpret_cast<char*>(&_impl_.skl_),
          reinterpret_cast<char*>(&other->_impl_.skl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PSkillCountSingle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSkillCount_2eproto_getter, &descriptor_table_proto_2fSkillCount_2eproto_once,
      file_level_metadata_proto_2fSkillCount_2eproto[0]);
}
// ===================================================================

class PSkillCount::_Internal {
 public:
  using HasBits = decltype(std::declval<PSkillCount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PSkillCount, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PSkillCount::PSkillCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PSkillCount)
}
PSkillCount::PSkillCount(const PSkillCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PSkillCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.PSkillCount)
}

inline void PSkillCount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_){arena}
    , decltype(_impl_.id_) { 0 }

  };
}

PSkillCount::~PSkillCount() {
  // @@protoc_insertion_point(destructor:proto.PSkillCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSkillCount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_list()->~RepeatedPtrField();
}

void PSkillCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSkillCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PSkillCount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_list()->Clear();
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSkillCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .proto.PSkillCountSingle list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PSkillCount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PSkillCount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  // repeated .proto.PSkillCountSingle list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PSkillCount)
  return target;
}

::size_t PSkillCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PSkillCount)
  ::size_t total_size = 0;

  // required int32 id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PSkillCountSingle list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_internal_list()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSkillCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSkillCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSkillCount::GetClassData() const { return &_class_data_; }


void PSkillCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSkillCount*>(&to_msg);
  auto& from = static_cast<const PSkillCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PSkillCount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_list()->MergeFrom(from._internal_list());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSkillCount::CopyFrom(const PSkillCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PSkillCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSkillCount::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_list()))
    return false;
  return true;
}

void PSkillCount::InternalSwap(PSkillCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_list()->InternalSwap(other->_internal_mutable_list());

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSkillCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fSkillCount_2eproto_getter, &descriptor_table_proto_2fSkillCount_2eproto_once,
      file_level_metadata_proto_2fSkillCount_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::PSkillCountSingle*
Arena::CreateMaybeMessage< ::proto::PSkillCountSingle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PSkillCountSingle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PSkillCount*
Arena::CreateMaybeMessage< ::proto::PSkillCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PSkillCount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
