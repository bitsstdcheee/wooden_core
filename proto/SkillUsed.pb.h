// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SkillUsed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fSkillUsed_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fSkillUsed_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "proto/Skill.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fSkillUsed_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fSkillUsed_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2fSkillUsed_2eproto;
namespace proto {
class PSkillUsed;
struct PSkillUsedDefaultTypeInternal;
extern PSkillUsedDefaultTypeInternal _PSkillUsed_default_instance_;
class PSkillUsedSingle;
struct PSkillUsedSingleDefaultTypeInternal;
extern PSkillUsedSingleDefaultTypeInternal _PSkillUsedSingle_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template <>
::proto::PSkillUsed* Arena::CreateMaybeMessage<::proto::PSkillUsed>(Arena*);
template <>
::proto::PSkillUsedSingle* Arena::CreateMaybeMessage<::proto::PSkillUsedSingle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class PSkillUsedSingle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PSkillUsedSingle) */ {
 public:
  inline PSkillUsedSingle() : PSkillUsedSingle(nullptr) {}
  ~PSkillUsedSingle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PSkillUsedSingle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PSkillUsedSingle(const PSkillUsedSingle& from);
  PSkillUsedSingle(PSkillUsedSingle&& from) noexcept
    : PSkillUsedSingle() {
    *this = ::std::move(from);
  }

  inline PSkillUsedSingle& operator=(const PSkillUsedSingle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSkillUsedSingle& operator=(PSkillUsedSingle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PSkillUsedSingle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PSkillUsedSingle* internal_default_instance() {
    return reinterpret_cast<const PSkillUsedSingle*>(
               &_PSkillUsedSingle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PSkillUsedSingle& a, PSkillUsedSingle& b) {
    a.Swap(&b);
  }
  inline void Swap(PSkillUsedSingle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSkillUsedSingle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PSkillUsedSingle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PSkillUsedSingle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PSkillUsedSingle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PSkillUsedSingle& from) {
    PSkillUsedSingle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSkillUsedSingle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.PSkillUsedSingle";
  }
  protected:
  explicit PSkillUsedSingle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSklFieldNumber = 1,
    kUsedFieldNumber = 2,
  };
  // required .proto.PSkill skl = 1;
  bool has_skl() const;
  void clear_skl() ;
  const ::proto::PSkill& skl() const;
  PROTOBUF_NODISCARD ::proto::PSkill* release_skl();
  ::proto::PSkill* mutable_skl();
  void set_allocated_skl(::proto::PSkill* skl);
  private:
  const ::proto::PSkill& _internal_skl() const;
  ::proto::PSkill* _internal_mutable_skl();
  public:
  void unsafe_arena_set_allocated_skl(
      ::proto::PSkill* skl);
  ::proto::PSkill* unsafe_arena_release_skl();
  // required bool used = 2;
  bool has_used() const;
  void clear_used() ;
  bool used() const;
  void set_used(bool value);

  private:
  bool _internal_used() const;
  void _internal_set_used(bool value);

  public:
  // @@protoc_insertion_point(class_scope:proto.PSkillUsedSingle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::proto::PSkill* skl_;
    bool used_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSkillUsed_2eproto;
};// -------------------------------------------------------------------

class PSkillUsed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PSkillUsed) */ {
 public:
  inline PSkillUsed() : PSkillUsed(nullptr) {}
  ~PSkillUsed() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PSkillUsed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PSkillUsed(const PSkillUsed& from);
  PSkillUsed(PSkillUsed&& from) noexcept
    : PSkillUsed() {
    *this = ::std::move(from);
  }

  inline PSkillUsed& operator=(const PSkillUsed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSkillUsed& operator=(PSkillUsed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PSkillUsed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PSkillUsed* internal_default_instance() {
    return reinterpret_cast<const PSkillUsed*>(
               &_PSkillUsed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PSkillUsed& a, PSkillUsed& b) {
    a.Swap(&b);
  }
  inline void Swap(PSkillUsed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSkillUsed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PSkillUsed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PSkillUsed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PSkillUsed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PSkillUsed& from) {
    PSkillUsed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSkillUsed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.PSkillUsed";
  }
  protected:
  explicit PSkillUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .proto.PSkillUsedSingle list = 2;
  int list_size() const;
  private:
  int _internal_list_size() const;

  public:
  void clear_list() ;
  ::proto::PSkillUsedSingle* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PSkillUsedSingle >*
      mutable_list();
  private:
  const ::proto::PSkillUsedSingle& _internal_list(int index) const;
  ::proto::PSkillUsedSingle* _internal_add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::proto::PSkillUsedSingle>& _internal_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::proto::PSkillUsedSingle>* _internal_mutable_list();
  public:
  const ::proto::PSkillUsedSingle& list(int index) const;
  ::proto::PSkillUsedSingle* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PSkillUsedSingle >&
      list() const;
  // required int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:proto.PSkillUsed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PSkillUsedSingle > list_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fSkillUsed_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PSkillUsedSingle

// required .proto.PSkill skl = 1;
inline bool PSkillUsedSingle::has_skl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skl_ != nullptr);
  return value;
}
inline const ::proto::PSkill& PSkillUsedSingle::_internal_skl() const {
  const ::proto::PSkill* p = _impl_.skl_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PSkill&>(
      ::proto::_PSkill_default_instance_);
}
inline const ::proto::PSkill& PSkillUsedSingle::skl() const {
  // @@protoc_insertion_point(field_get:proto.PSkillUsedSingle.skl)
  return _internal_skl();
}
inline void PSkillUsedSingle::unsafe_arena_set_allocated_skl(
    ::proto::PSkill* skl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skl_);
  }
  _impl_.skl_ = skl;
  if (skl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PSkillUsedSingle.skl)
}
inline ::proto::PSkill* PSkillUsedSingle::release_skl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto::PSkill* temp = _impl_.skl_;
  _impl_.skl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PSkill* PSkillUsedSingle::unsafe_arena_release_skl() {
  // @@protoc_insertion_point(field_release:proto.PSkillUsedSingle.skl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::proto::PSkill* temp = _impl_.skl_;
  _impl_.skl_ = nullptr;
  return temp;
}
inline ::proto::PSkill* PSkillUsedSingle::_internal_mutable_skl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.skl_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PSkill>(GetArenaForAllocation());
    _impl_.skl_ = p;
  }
  return _impl_.skl_;
}
inline ::proto::PSkill* PSkillUsedSingle::mutable_skl() {
  ::proto::PSkill* _msg = _internal_mutable_skl();
  // @@protoc_insertion_point(field_mutable:proto.PSkillUsedSingle.skl)
  return _msg;
}
inline void PSkillUsedSingle::set_allocated_skl(::proto::PSkill* skl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skl_);
  }
  if (skl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skl));
    if (message_arena != submessage_arena) {
      skl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.skl_ = skl;
  // @@protoc_insertion_point(field_set_allocated:proto.PSkillUsedSingle.skl)
}

// required bool used = 2;
inline bool PSkillUsedSingle::has_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PSkillUsedSingle::clear_used() {
  _impl_.used_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PSkillUsedSingle::used() const {
  // @@protoc_insertion_point(field_get:proto.PSkillUsedSingle.used)
  return _internal_used();
}
inline void PSkillUsedSingle::set_used(bool value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:proto.PSkillUsedSingle.used)
}
inline bool PSkillUsedSingle::_internal_used() const {
  return _impl_.used_;
}
inline void PSkillUsedSingle::_internal_set_used(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.used_ = value;
}

// -------------------------------------------------------------------

// PSkillUsed

// required int32 id = 1;
inline bool PSkillUsed::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PSkillUsed::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PSkillUsed::id() const {
  // @@protoc_insertion_point(field_get:proto.PSkillUsed.id)
  return _internal_id();
}
inline void PSkillUsed::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.PSkillUsed.id)
}
inline ::int32_t PSkillUsed::_internal_id() const {
  return _impl_.id_;
}
inline void PSkillUsed::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// repeated .proto.PSkillUsedSingle list = 2;
inline int PSkillUsed::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int PSkillUsed::list_size() const {
  return _internal_list_size();
}
inline void PSkillUsed::clear_list() {
  _internal_mutable_list()->Clear();
}
inline ::proto::PSkillUsedSingle* PSkillUsed::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PSkillUsed.list)
  return _internal_mutable_list()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PSkillUsedSingle >*
PSkillUsed::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.PSkillUsed.list)
  return _internal_mutable_list();
}
inline const ::proto::PSkillUsedSingle& PSkillUsed::_internal_list(int index) const {
  return _internal_list().Get(index);
}
inline const ::proto::PSkillUsedSingle& PSkillUsed::list(int index) const {
  // @@protoc_insertion_point(field_get:proto.PSkillUsed.list)
  return _internal_list(index);
}
inline ::proto::PSkillUsedSingle* PSkillUsed::_internal_add_list() {
  return _internal_mutable_list()->Add();
}
inline ::proto::PSkillUsedSingle* PSkillUsed::add_list() {
  ::proto::PSkillUsedSingle* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:proto.PSkillUsed.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PSkillUsedSingle >&
PSkillUsed::list() const {
  // @@protoc_insertion_point(field_list:proto.PSkillUsed.list)
  return _internal_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::proto::PSkillUsedSingle>&
PSkillUsed::_internal_list() const {
  return _impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::proto::PSkillUsedSingle>*
PSkillUsed::_internal_mutable_list() {
  return &_impl_.list_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fSkillUsed_2eproto_2epb_2eh
